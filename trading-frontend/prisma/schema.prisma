// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// 사용자 정보
model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  password      String?
  image         String?
  emailVerified DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  accounts      Account[]
  sessions      Session[]
  apiKeys       ApiKey[]
  settings      TradingSettings?
  positions     Position[]
  trades        Trade[]
  webhooks      Webhook[]
  xpTransactions XpTransaction[]
  strategyConfigs StrategyConfig[]

  // Gamification fields
  totalXp       Int      @default(0)
  level         Int      @default(1)
  totalTrades   Int      @default(0)
  totalWins     Int      @default(0)
  totalLosses   Int      @default(0)
  totalPnl      Float    @default(0)
  winStreak     Int      @default(0)
  badges        String[] @default([])

  @@index([email])
}

// NextAuth Account model
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

// NextAuth Session model
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

// NextAuth VerificationToken model
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Binance API 키 (AES-256-GCM 암호화)
model ApiKey {
  id          String   @id @default(cuid())
  userId      String
  exchange    String   @default("binance") // binance, bybit 등
  apiKey      String   // 암호화된 API 키
  apiSecret   String   // 암호화된 Secret 키
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

// 거래 설정
model TradingSettings {
  id                       String   @id @default(cuid())
  userId                   String   @unique
  riskTolerance            String   @default("medium") // low, medium, high
  selectedCoins            String[] @default(["BTC/USDT"])
  leverage                 Int      @default(3)
  positionSizePct          Float    @default(0.10) // 10%
  stopLossAtrMultiplier    Float    @default(2.0)
  takeProfitAtrMultiplier  Float    @default(3.0)
  autoCloseOnReversal      Boolean  @default(true)
  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

// 포지션 (현재 열린 거래)
model Position {
  id             String    @id @default(cuid())
  userId         String
  symbol         String    // BTC/USDT
  side           String    // LONG, SHORT
  quantity       Float
  entryPrice     Float
  currentPrice   Float
  stopLoss       Float
  takeProfit     Float
  leverage       Int
  unrealizedPnl  Float
  status         String    @default("OPEN") // OPEN, CLOSED
  aiConfidence   Float?    // AI 신뢰도 (0.0-1.0)
  aiReason       String?   @db.Text // AI 의사결정 근거
  openedAt       DateTime  @default(now())
  closedAt       DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([symbol])
  @@index([status])
}

// 거래 내역 (체결 완료된 거래)
model Trade {
  id             String   @id @default(cuid())
  userId         String
  symbol         String
  side           String   // LONG, SHORT
  quantity       Float
  entryPrice     Float
  exitPrice      Float
  stopLoss       Float
  takeProfit     Float
  leverage       Int
  realizedPnl    Float
  pnlPercent     Float
  aiConfidence   Float?
  aiReason       String?  @db.Text
  exitReason     String?  // TP_HIT, SL_HIT, REVERSAL, MANUAL
  openedAt       DateTime
  closedAt       DateTime
  createdAt      DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([symbol])
  @@index([closedAt])
}

// TradingView Webhook
model Webhook {
  id            String   @id @default(cuid())
  userId        String
  name          String
  description   String?
  webhookUrl    String   @unique
  secretToken   String   // HMAC-SHA256 서명 검증용
  isActive      Boolean  @default(true)
  totalTriggers Int      @default(0)
  lastTriggered DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([webhookUrl])
}

// XP 거래 내역 (게이미피케이션)
model XpTransaction {
  id          String   @id @default(cuid())
  userId      String
  amount      Int      // XP 증감량
  reason      String   // WIN, LOSS, STREAK_BONUS, BADGE_EARNED
  description String?
  metadata    Json?    // 추가 정보 (거래 ID, 배지 타입 등)
  createdAt   DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([createdAt])
}

// 전략 템플릿 (기본 제공 + 사용자 커스텀)
model Strategy {
  id                String   @id @default(cuid())
  name              String   // "Aggressive AI Ensemble", "Conservative TA"
  description       String   @db.Text
  category          String   @default("AI_ENSEMBLE") // AI_ENSEMBLE, TECHNICAL, FUNDAMENTAL, HYBRID
  isPublic          Boolean  @default(true) // 공개 템플릿 여부
  creatorId         String?  // NULL = 시스템 기본 전략

  // AI 모델 가중치
  mlWeight          Float    @default(0.40) // 40%
  gpt4Weight        Float    @default(0.25) // 25%
  claudeWeight      Float    @default(0.25) // 25%
  taWeight          Float    @default(0.10) // 10%

  // 진입 조건
  minProbability    Float    @default(0.80) // 80% 이상
  minConfidence     Float    @default(0.70) // 70% 이상
  minAgreement      Float    @default(0.70) // 70% 일치도

  // 리스크 관리
  defaultLeverage   Int      @default(3)
  positionSizePct   Float    @default(0.10) // 10%
  slAtrMultiplier   Float    @default(2.0) // Stop-Loss ATR 배수
  tpAtrMultiplier   Float    @default(3.0) // Take-Profit ATR 배수
  maxOpenPositions  Int      @default(3)

  // 기술적 지표 설정
  atrPeriod         Int      @default(14)
  rsiPeriod         Int      @default(14)
  macdFast          Int      @default(12)
  macdSlow          Int      @default(26)
  macdSignal        Int      @default(9)

  // 통계
  usageCount        Int      @default(0)
  avgWinRate        Float?
  avgPnl            Float?

  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  configs           StrategyConfig[]
  backtestResults   BacktestResult[]

  @@index([category])
  @@index([isPublic])
  @@index([creatorId])
}

// 사용자별 전략 설정 (Strategy를 기반으로 커스터마이징)
model StrategyConfig {
  id                String   @id @default(cuid())
  userId            String
  strategyId        String
  name              String   // 사용자 지정 이름
  isActive          Boolean  @default(false)

  // 사용자 커스텀 파라미터 (Strategy 템플릿 덮어쓰기)
  customParams      Json?    // 사용자가 수정한 파라미터들

  // 실행 통계
  totalTrades       Int      @default(0)
  winRate           Float?
  totalPnl          Float    @default(0)
  maxDrawdown       Float?
  sharpeRatio       Float?

  // 자동 거래 설정
  autoTradeEnabled  Boolean  @default(false)
  selectedSymbols   String[] @default(["BTCUSDT"])

  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  lastUsedAt        DateTime?

  // Relations
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  strategy          Strategy @relation(fields: [strategyId], references: [id], onDelete: Cascade)

  @@unique([userId, strategyId]) // 사용자당 전략별 1개의 설정
  @@index([userId])
  @@index([strategyId])
  @@index([isActive])
}

// 백테스팅 결과
model BacktestResult {
  id                String   @id @default(cuid())
  userId            String
  strategyId        String

  // 백테스트 설정
  symbol            String
  interval          String   // 1h, 4h, 1d
  startDate         DateTime
  endDate           DateTime
  initialCapital    Float    @default(10000)

  // 백테스트 결과
  totalTrades       Int
  winningTrades     Int
  losingTrades      Int
  winRate           Float
  totalPnl          Float
  totalPnlPct       Float
  maxDrawdown       Float
  maxDrawdownPct    Float
  sharpeRatio       Float?
  sortinoRatio      Float?
  profitFactor      Float?
  avgWinPnl         Float?
  avgLossPnl        Float?
  largestWin        Float?
  largestLoss       Float?

  // 자세한 거래 내역 (JSON 배열)
  trades            Json     // [{entry, exit, pnl, reason}, ...]

  // 차트 데이터 (Equity Curve)
  equityCurve       Json     // [{timestamp, equity}, ...]

  createdAt         DateTime @default(now())

  // Relations
  strategy          Strategy @relation(fields: [strategyId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([strategyId])
  @@index([symbol])
  @@index([createdAt])
}
