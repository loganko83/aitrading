// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// 사용자 정보
model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  password      String?
  image         String?
  emailVerified DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  accounts      Account[]
  sessions      Session[]
  apiKeys       ApiKey[]
  settings      TradingSettings?
  positions     Position[]
  trades        Trade[]
  webhooks      Webhook[]
  xpTransactions XpTransaction[]

  // Gamification fields
  totalXp       Int      @default(0)
  level         Int      @default(1)
  totalTrades   Int      @default(0)
  totalWins     Int      @default(0)
  totalLosses   Int      @default(0)
  totalPnl      Float    @default(0)
  winStreak     Int      @default(0)
  badges        String[] @default([])

  @@index([email])
}

// NextAuth Account model
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

// NextAuth Session model
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

// NextAuth VerificationToken model
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Binance API 키 (AES-256-GCM 암호화)
model ApiKey {
  id          String   @id @default(cuid())
  userId      String
  exchange    String   @default("binance") // binance, bybit 등
  apiKey      String   // 암호화된 API 키
  apiSecret   String   // 암호화된 Secret 키
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

// 거래 설정
model TradingSettings {
  id                       String   @id @default(cuid())
  userId                   String   @unique
  riskTolerance            String   @default("medium") // low, medium, high
  selectedCoins            String[] @default(["BTC/USDT"])
  leverage                 Int      @default(3)
  positionSizePct          Float    @default(0.10) // 10%
  stopLossAtrMultiplier    Float    @default(2.0)
  takeProfitAtrMultiplier  Float    @default(3.0)
  autoCloseOnReversal      Boolean  @default(true)
  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

// 포지션 (현재 열린 거래)
model Position {
  id             String    @id @default(cuid())
  userId         String
  symbol         String    // BTC/USDT
  side           String    // LONG, SHORT
  quantity       Float
  entryPrice     Float
  currentPrice   Float
  stopLoss       Float
  takeProfit     Float
  leverage       Int
  unrealizedPnl  Float
  status         String    @default("OPEN") // OPEN, CLOSED
  aiConfidence   Float?    // AI 신뢰도 (0.0-1.0)
  aiReason       String?   @db.Text // AI 의사결정 근거
  openedAt       DateTime  @default(now())
  closedAt       DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([symbol])
  @@index([status])
}

// 거래 내역 (체결 완료된 거래)
model Trade {
  id             String   @id @default(cuid())
  userId         String
  symbol         String
  side           String   // LONG, SHORT
  quantity       Float
  entryPrice     Float
  exitPrice      Float
  stopLoss       Float
  takeProfit     Float
  leverage       Int
  realizedPnl    Float
  pnlPercent     Float
  aiConfidence   Float?
  aiReason       String?  @db.Text
  exitReason     String?  // TP_HIT, SL_HIT, REVERSAL, MANUAL
  openedAt       DateTime
  closedAt       DateTime
  createdAt      DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([symbol])
  @@index([closedAt])
}

// TradingView Webhook
model Webhook {
  id            String   @id @default(cuid())
  userId        String
  name          String
  description   String?
  webhookUrl    String   @unique
  secretToken   String   // HMAC-SHA256 서명 검증용
  isActive      Boolean  @default(true)
  totalTriggers Int      @default(0)
  lastTriggered DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([webhookUrl])
}

// XP 거래 내역 (게이미피케이션)
model XpTransaction {
  id          String   @id @default(cuid())
  userId      String
  amount      Int      // XP 증감량
  reason      String   // WIN, LOSS, STREAK_BONUS, BADGE_EARNED
  description String?
  metadata    Json?    // 추가 정보 (거래 ID, 배지 타입 등)
  createdAt   DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([createdAt])
}
