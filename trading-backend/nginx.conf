# TradingBot AI - Nginx Production Configuration
# Reverse proxy for FastAPI backend

user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
    use epoll;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Logging
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" '
                    'rt=$request_time uct="$upstream_connect_time" '
                    'uht="$upstream_header_time" urt="$upstream_response_time"';

    access_log /var/log/nginx/access.log main;

    # Performance
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    client_max_body_size 10M;

    # Gzip compression
    gzip on;
    gzip_disable "msie6";
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types text/plain text/css text/xml text/javascript
               application/json application/javascript application/xml+rss
               application/rss+xml font/truetype font/opentype
               application/vnd.ms-fontobject image/svg+xml;

    # Rate limiting zones
    limit_req_zone $binary_remote_addr zone=api_limit:10m rate=60r/m;
    limit_req_zone $binary_remote_addr zone=webhook_limit:10m rate=300r/m;

    # Upstream FastAPI backend
    upstream backend {
        least_conn;
        server backend:8001 max_fails=3 fail_timeout=30s;
        keepalive 32;
    }

    # HTTP Server (redirect to HTTPS in production)
    server {
        listen 80;
        server_name localhost;

        # Health check endpoint (no redirect)
        location /health {
            access_log off;
            proxy_pass http://backend/api/v1/health;
            proxy_http_version 1.1;
            proxy_set_header Connection "";
        }

        # Redirect all other traffic to HTTPS (enable in production)
        # location / {
        #     return 301 https://$server_name$request_uri;
        # }

        # Development: proxy to backend
        location / {
            proxy_pass http://backend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_buffering off;
            proxy_read_timeout 120s;
            proxy_connect_timeout 10s;
        }
    }

    # HTTPS Server (enable in production)
    # server {
    #     listen 443 ssl http2;
    #     server_name your-domain.com;
    #
    #     # SSL Configuration
    #     ssl_certificate /etc/nginx/ssl/cert.pem;
    #     ssl_certificate_key /etc/nginx/ssl/key.pem;
    #     ssl_protocols TLSv1.2 TLSv1.3;
    #     ssl_ciphers HIGH:!aNULL:!MD5;
    #     ssl_prefer_server_ciphers on;
    #     ssl_session_cache shared:SSL:10m;
    #     ssl_session_timeout 10m;
    #
    #     # Security headers
    #     add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
    #     add_header X-Frame-Options "SAMEORIGIN" always;
    #     add_header X-Content-Type-Options "nosniff" always;
    #     add_header X-XSS-Protection "1; mode=block" always;
    #
    #     # API routes with rate limiting
    #     location /api/ {
    #         limit_req zone=api_limit burst=10 nodelay;
    #         limit_req_status 429;
    #
    #         proxy_pass http://backend;
    #         proxy_http_version 1.1;
    #         proxy_set_header Upgrade $http_upgrade;
    #         proxy_set_header Connection "upgrade";
    #         proxy_set_header Host $host;
    #         proxy_set_header X-Real-IP $remote_addr;
    #         proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    #         proxy_set_header X-Forwarded-Proto $scheme;
    #         proxy_buffering off;
    #         proxy_read_timeout 120s;
    #         proxy_connect_timeout 10s;
    #     }
    #
    #     # Webhook endpoint with higher rate limit
    #     location /api/v1/webhook/ {
    #         limit_req zone=webhook_limit burst=50 nodelay;
    #         limit_req_status 429;
    #
    #         proxy_pass http://backend;
    #         proxy_http_version 1.1;
    #         proxy_set_header Host $host;
    #         proxy_set_header X-Real-IP $remote_addr;
    #         proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    #         proxy_set_header X-Forwarded-Proto $scheme;
    #         proxy_read_timeout 30s;
    #         proxy_connect_timeout 5s;
    #     }
    #
    #     # WebSocket endpoint
    #     location /ws/ {
    #         proxy_pass http://backend;
    #         proxy_http_version 1.1;
    #         proxy_set_header Upgrade $http_upgrade;
    #         proxy_set_header Connection "upgrade";
    #         proxy_set_header Host $host;
    #         proxy_set_header X-Real-IP $remote_addr;
    #         proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    #         proxy_set_header X-Forwarded-Proto $scheme;
    #         proxy_read_timeout 3600s;
    #         proxy_connect_timeout 10s;
    #         proxy_buffering off;
    #     }
    #
    #     # Health check
    #     location /health {
    #         access_log off;
    #         proxy_pass http://backend/api/v1/health;
    #         proxy_http_version 1.1;
    #         proxy_set_header Connection "";
    #     }
    #
    #     # Documentation
    #     location /docs {
    #         proxy_pass http://backend/docs;
    #         proxy_http_version 1.1;
    #         proxy_set_header Host $host;
    #     }
    #
    #     location /redoc {
    #         proxy_pass http://backend/redoc;
    #         proxy_http_version 1.1;
    #         proxy_set_header Host $host;
    #     }
    # }
}
