version: '3.8'

services:
  # ============================================
  # PostgreSQL Database
  # ============================================
  postgres:
    image: postgres:15-alpine
    container_name: tradingbot-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-tradingbot}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-tradingbot_password}
      POSTGRES_DB: ${POSTGRES_DB:-tradingbot}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-tradingbot}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - tradingbot-network

  # ============================================
  # Redis Cache
  # ============================================
  redis:
    image: redis:7-alpine
    container_name: tradingbot-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis_password}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - tradingbot-network

  # ============================================
  # FastAPI Backend
  # ============================================
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: tradingbot-backend
    restart: unless-stopped
    env_file:
      - .env.docker
    environment:
      # Database
      DATABASE_URL: postgresql://${POSTGRES_USER:-tradingbot}:${POSTGRES_PASSWORD:-tradingbot_password}@postgres:5432/${POSTGRES_DB:-tradingbot}

      # Redis
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis_password}@redis:6379/0

      # Application
      DEBUG: ${DEBUG:-False}
      ENVIRONMENT: ${ENVIRONMENT:-production}
      LOG_LEVEL: ${LOG_LEVEL:-INFO}

      # Wait for services
      WAIT_HOSTS: postgres:5432,redis:6379
      WAIT_TIMEOUT: 60
    volumes:
      # Persistent data
      - ./logs:/app/logs
      - ./models:/app/models
      - ./cache:/app/cache

      # Development only (comment out in production)
      # - ./app:/app/app
    ports:
      - "8001:8001"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - tradingbot-network
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G

  # ============================================
  # Nginx Reverse Proxy (Production)
  # ============================================
  nginx:
    image: nginx:alpine
    container_name: tradingbot-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - tradingbot-network
    profiles:
      - production

# ============================================
# Volumes
# ============================================
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  nginx_logs:
    driver: local

# ============================================
# Networks
# ============================================
networks:
  tradingbot-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
