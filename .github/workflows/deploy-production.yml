name: Deploy to Production

on:
  push:
    branches: [ master, main ]
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      confirm:
        description: 'Type "DEPLOY" to confirm production deployment'
        required: true
        default: ''

env:
  AWS_REGION: ap-southeast-2
  ECR_REPOSITORY_BACKEND: trading-backend-production
  ECR_REPOSITORY_FRONTEND: trading-frontend-production
  ECS_SERVICE_BACKEND: trading-backend-production
  ECS_SERVICE_FRONTEND: trading-frontend-production
  ECS_CLUSTER: trading-production

jobs:
  validate-deployment:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'

    steps:
    - name: Validate confirmation input
      run: |
        if [ "${{ github.event.inputs.confirm }}" != "DEPLOY" ]; then
          echo "Deployment confirmation failed. Please type 'DEPLOY' to proceed."
          exit 1
        fi
        echo "Deployment confirmed"

  pre-deployment-checks:
    runs-on: ubuntu-latest
    needs: [validate-deployment]
    if: always() && (needs.validate-deployment.result == 'success' || needs.validate-deployment.result == 'skipped')

    steps:
    - uses: actions/checkout@v4

    - name: Check staging environment health
      run: |
        echo "Checking staging environment..."
        backend_status=$(curl -s -o /dev/null -w "%{http_code}" https://api-staging.trendy.storydot.kr/api/v1/health)
        frontend_status=$(curl -s -o /dev/null -w "%{http_code}" https://staging.trendy.storydot.kr)

        if [ $backend_status -ne 200 ] || [ $frontend_status -ne 200 ]; then
          echo "Staging environment is unhealthy. Aborting production deployment."
          exit 1
        fi
        echo "Staging environment is healthy"

    - name: Run backend tests
      working-directory: ./trading-backend
      run: |
        docker build -t backend-test .
        docker run --rm backend-test pytest tests/ -v
      continue-on-error: false

    - name: Check for pending database migrations
      run: |
        echo "Checking for pending migrations..."
        # This would connect to staging DB and check migration status
        # For now, we'll just verify migration files exist
        ls -l trading-backend/alembic/versions/

  create-backup:
    runs-on: ubuntu-latest
    needs: pre-deployment-checks
    environment: production

    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Create RDS snapshot
      run: |
        TIMESTAMP=$(date +%Y%m%d-%H%M%S)
        SNAPSHOT_ID="trading-prod-pre-deploy-$TIMESTAMP"

        aws rds create-db-snapshot \
          --db-instance-identifier trading-production \
          --db-snapshot-identifier $SNAPSHOT_ID \
          --tags Key=Type,Value=pre-deployment Key=Timestamp,Value=$TIMESTAMP

        echo "Created snapshot: $SNAPSHOT_ID"
        echo "snapshot_id=$SNAPSHOT_ID" >> $GITHUB_OUTPUT

    - name: Wait for snapshot completion
      run: |
        echo "Waiting for snapshot to complete..."
        aws rds wait db-snapshot-completed --db-snapshot-identifier ${{ steps.create-backup.outputs.snapshot_id }}
        echo "Snapshot completed successfully"

  deploy-backend:
    runs-on: ubuntu-latest
    needs: create-backup
    environment:
      name: production
      url: https://api.trendy.storydot.kr

    steps:
    - uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build, tag, and push backend image to Amazon ECR
      working-directory: ./trading-backend
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
        VERSION_TAG: ${{ github.ref_name }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:$IMAGE_TAG .
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:latest
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:$VERSION_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:$VERSION_TAG
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Download task definition
      run: |
        aws ecs describe-task-definition \
          --task-definition trading-backend-production \
          --query taskDefinition > task-definition.json

    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: task-definition.json
        container-name: backend
        image: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY_BACKEND }}:${{ github.sha }}

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE_BACKEND }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true

    - name: Run database migrations
      run: |
        TASK_ARN=$(aws ecs list-tasks --cluster ${{ env.ECS_CLUSTER }} --service-name ${{ env.ECS_SERVICE_BACKEND }} --query 'taskArns[0]' --output text)
        aws ecs execute-command \
          --cluster ${{ env.ECS_CLUSTER }} \
          --task $TASK_ARN \
          --container backend \
          --interactive \
          --command "alembic upgrade head"

  deploy-frontend:
    runs-on: ubuntu-latest
    needs: deploy-backend
    environment:
      name: production
      url: https://trendy.storydot.kr

    steps:
    - uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build, tag, and push frontend image to Amazon ECR
      working-directory: ./trading-frontend
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
        VERSION_TAG: ${{ github.ref_name }}
        NEXTAUTH_URL: https://trendy.storydot.kr
        NEXT_PUBLIC_API_URL: https://api.trendy.storydot.kr
      run: |
        docker build \
          --build-arg NEXTAUTH_URL=$NEXTAUTH_URL \
          --build-arg NEXTAUTH_SECRET=${{ secrets.NEXTAUTH_SECRET_PRODUCTION }} \
          --build-arg NEXT_PUBLIC_API_URL=$NEXT_PUBLIC_API_URL \
          -t $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:$IMAGE_TAG .
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:latest
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:$VERSION_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:$VERSION_TAG
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Download task definition
      run: |
        aws ecs describe-task-definition \
          --task-definition trading-frontend-production \
          --query taskDefinition > task-definition-frontend.json

    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: task-definition-frontend.json
        container-name: frontend
        image: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY_FRONTEND }}:${{ github.sha }}

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE_FRONTEND }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true

  smoke-tests:
    runs-on: ubuntu-latest
    needs: [deploy-backend, deploy-frontend]

    steps:
    - name: Wait for services to stabilize
      run: sleep 60

    - name: Backend health check
      run: |
        response=$(curl -s -o /dev/null -w "%{http_code}" https://api.trendy.storydot.kr/api/v1/health)
        if [ $response -ne 200 ]; then
          echo "Backend health check failed with status $response"
          exit 1
        fi
        echo "✅ Backend health check passed"

    - name: Frontend health check
      run: |
        response=$(curl -s -o /dev/null -w "%{http_code}" https://trendy.storydot.kr)
        if [ $response -ne 200 ]; then
          echo "Frontend health check failed with status $response"
          exit 1
        fi
        echo "✅ Frontend health check passed"

    - name: API endpoints smoke test
      run: |
        # Test critical endpoints
        endpoints=(
          "https://api.trendy.storydot.kr/docs"
          "https://api.trendy.storydot.kr/api/v1/simple/exchanges"
        )

        for endpoint in "${endpoints[@]}"; do
          status=$(curl -s -o /dev/null -w "%{http_code}" $endpoint)
          if [ $status -eq 200 ] || [ $status -eq 401 ]; then
            echo "✅ $endpoint: $status"
          else
            echo "❌ $endpoint: $status (FAILED)"
            exit 1
          fi
        done

  notify:
    runs-on: ubuntu-latest
    needs: [smoke-tests]
    if: always()

    steps:
    - name: Send Slack notification
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        text: |
          🚀 Production Deployment ${{ job.status }}

          Commit: ${{ github.sha }}
          Author: ${{ github.actor }}

          Backend: https://api.trendy.storydot.kr
          Frontend: https://trendy.storydot.kr

          View workflow: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
        webhook_url: ${{ secrets.SLACK_WEBHOOK_PRODUCTION }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_PRODUCTION }}

    - name: Send Telegram notification
      if: success()
      run: |
        curl -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
          -d chat_id="${{ secrets.TELEGRAM_CHAT_ID }}" \
          -d text="🚀 Production deployed successfully!%0A%0ACommit: ${{ github.sha }}%0AAuthor: ${{ github.actor }}%0A%0A✅ Backend: https://api.trendy.storydot.kr%0A✅ Frontend: https://trendy.storydot.kr"

  rollback:
    runs-on: ubuntu-latest
    needs: [smoke-tests]
    if: failure()
    environment: production

    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Rollback backend service
      run: |
        echo "Rolling back backend to previous task definition..."
        aws ecs update-service \
          --cluster ${{ env.ECS_CLUSTER }} \
          --service ${{ env.ECS_SERVICE_BACKEND }} \
          --force-new-deployment \
          --task-definition trading-backend-production:PREVIOUS

    - name: Rollback frontend service
      run: |
        echo "Rolling back frontend to previous task definition..."
        aws ecs update-service \
          --cluster ${{ env.ECS_CLUSTER }} \
          --service ${{ env.ECS_SERVICE_FRONTEND }} \
          --force-new-deployment \
          --task-definition trading-frontend-production:PREVIOUS

    - name: Send rollback notification
      uses: 8398a7/action-slack@v3
      with:
        status: 'warning'
        text: |
          ⚠️ Production Deployment Failed - Automatic Rollback Initiated

          Commit: ${{ github.sha }}
          Author: ${{ github.actor }}

          View workflow: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
        webhook_url: ${{ secrets.SLACK_WEBHOOK_PRODUCTION }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_PRODUCTION }}
